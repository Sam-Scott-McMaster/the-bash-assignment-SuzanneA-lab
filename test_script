#!/bin/bash
#
# A simple framework for testing the bn scripts
#
# Returns the number of failed test cases.
#
# Format of a test:
#     test 'command' expected_return_value 'stdin text' 'expected stdout' 'expected stderr'
#
# Some example test cases are given. You should add more test cases.
#
# Sam Scott, McMaster University, 2024


# GLOBALS: tc = test case number, fails = number of failed cases
declare -i tc=0
declare -i fails=0

############################################
# Run a single test. Runs a given command 3 times
# to check the return value, stdout, and stderr
#
# GLOBALS: tc, fails
# PARAMS: $1 = command
#         $2 = expected return value
#         $3 = standard input text to send
#         $4 = expected stdout
#         $5 = expected stderr
# RETURNS: 0 = success, 1 = bad return, 
#          2 = bad stdout, 3 = bad stderr
############################################
test() {
    tc=tc+1

    local COMMAND=$1
    local RETURN=$2
	local STDIN=$3
    local STDOUT=$4
    local STDERR=$5

    # CHECK RETURN VALUE
    $COMMAND <<< "$STDIN" >/dev/null 2>/dev/null
    local A_RETURN=$?

    if [[ "$A_RETURN" != "$RETURN" ]]; then
        echo "Test $tc Failed"
        echo "   $COMMAND"
        echo "   Expected Return: $RETURN"
        echo "   Actual Return: $A_RETURN"
        fails=$fails+1
        return 1
    fi

    # CHECK STDOUT
    local A_STDOUT=$($COMMAND <<< "$STDIN" 2>/dev/null)

    if [[ "$STDOUT" != "$A_STDOUT" ]]; then
        echo "Test $tc Failed"
        echo "   $COMMAND"
        echo "   Expected STDOUT: $STDOUT"
        echo "   Actual STDOUT: $A_STDOUT"
        fails=$fails+1
        return 2
    fi
    
    # CHECK STDERR
    local A_STDERR=$($COMMAND <<< "$STDIN" 2>&1 >/dev/null)

    if [[ "$STDERR" != "$A_STDERR" ]]; then
        echo "Test $tc Failed"
        echo "   $COMMAND"
        echo "   Expected STDERR: $STDERR"
        echo "   Actual STDERR: $A_STDERR"
        fails=$fails+1
        return 3
    fi
    
    # SUCCESS
    echo "Test $tc Passed"
    return 0
}

# simple success 
test './bn 2000 f' 0 'lucy' '2000: lucy ranked 324 out of 17658 female names.' ''

# multi line success
test './bn 1969 m' 0 'Sam SCott' '1969: Sam ranked 318 out of 5042 male names.
1969: SCott ranked 12 out of 5042 male names.' ''

# multi line success #2
test './bn 1969 m' 0 'sam lucy' '1969: sam ranked 318 out of 5042 male names.
1969: lucy not found among male names.' ''

# multi line success #3
test './bn 1969 b' 0 'sam lucy' '1969: sam ranked 5861 out of 8708 female names.
1969: sam ranked 318 out of 5042 male names.
1969: lucy ranked 391 out of 8708 female names.
1969: lucy not found among male names.' ''

# error case
test './bn 2022 F' 3 'lucy2' '' 'Badly formatted name: lucy2'  

# multi line error case #2
test './bn 1992 C' 2 '' '' 'Badly formatted assigned gender: C
bn <year> <assigned gender: f|F|m|M|b|B>'

# multi line error case #3
test './bn y1999 f' 2 '' '' 'Badly formatted year: y1999
bn <year> <assigned gender: f|F|m|M|b|B>'

# multi line error case #4
test './bn 1992' 1 '' '' 'Wrong number of arguments
bn <year> <assigned gender: f|F|m|M|b|B>'

# error case #2
test './bn 99 b' 4 '' '' 'No data for 99'

# return code
exit $fails

